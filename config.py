# Configuration settings
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

class Config:
    """
    Centralized configuration settings for the Smart Recipe Generator.
    Loads sensitive information from environment variables and defines
    other static configurations.
    """

    # --- API Keys ---
    # Google Gemini API Key: Loaded from the .env file for security.
    # Ensure GEMINI_API_KEY is set in your .env (e.g., GEMINI_API_KEY="your_api_key_here")
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

    # --- File Paths ---
    # Base directory for data storage
    BASE_DATA_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'data')

    # Path to the directory containing raw (unprocessed) recipe data
    RAW_RECIPES_PATH = os.path.join(BASE_DATA_DIR, 'raw_recipes')

    # Path to the directory for processed recipe data (e.g., JSON files)
    PROCESSED_RECIPES_PATH = os.path.join(BASE_DATA_DIR, 'processed_recipes')

    # Path for storing the FAISS index
    FAISS_INDEX_PATH = os.path.join(PROCESSED_RECIPES_PATH, 'faiss_index.bin')

    # Path for storing the mapping of recipe IDs to their original content
    RECIPE_METADATA_PATH = os.path.join(PROCESSED_RECIPES_PATH, 'recipe_metadata.json')


    # --- Embedding Model Settings ---
    # Default model for generating embeddings (e.g., for sentence-transformers)
    EMBEDDING_MODEL_NAME = "models/embedding-001" # A good balance of performance and size
    EMBEDDING_DIM = 768 # Dimension of embeddings generated by all-MiniLM-L6-v2

    # --- LLM Settings ---
    # Default LLM model for recipe generation (can be overridden)
    # This refers to a model that would be accessible via an API (e.g., Google's models)
    LLM_MODEL_NAME = "gemini-1.5-flash-latest"
    LLM_TEMPERATURE = 0.7 # Controls randomness in LLM output (0.0 for deterministic)
    #LLM_MAX_TOKENS = 1000 # Max tokens for LLM response

    # --- Data Processing Settings ---
    # Chunk size for splitting long recipe instructions for embedding
    TEXT_CHUNK_SIZE = 500
    # Overlap between chunks to maintain context
    TEXT_CHUNK_OVERLAP = 50

    # --- Other Settings ---
    # Add any other global constants or settings here
    APP_NAME = "Smart Recipe Generator"
    VERSION = "1.0.0"

    def __init__(self):
        """
        Initializes the Config and performs basic checks.
        """
        if not self.GEMINI_API_KEY:
            print("WARNING: GEMINI_API_KEY not found in .env file. "
                  "API-dependent features will not work.")

        # Create necessary directories if they don't exist
        os.makedirs(self.RAW_RECIPES_PATH, exist_ok=True)
        os.makedirs(self.PROCESSED_RECIPES_PATH, exist_ok=True)


# Instantiate the Config class to make settings accessible
config = Config()

# Example usage (for testing, typically not in the config file itself)
if __name__ == "__main__":
    print(f"App Name: {config.APP_NAME}")
    print(f"Raw Recipes Path: {config.RAW_RECIPES_PATH}")
    print(f"Processed Recipes Path: {config.PROCESSED_RECIPES_PATH}")
    print(f"Gemini API Key (first 5 chars): {config.GEMINI_API_KEY[:5] if config.GEMINI_API_KEY else 'N/A'}")
    print(f"Embedding Model: {config.EMBEDDING_MODEL_NAME}")
    print(f"LLM Model: {config.LLM_MODEL_NAME}")

